 官网：php.net


正则表达式
一、概述
       1、用途： 
            网络爬虫
            表单验证
       
       2、定义
            具有语法结构的字符串。

       3、函数
             PCRE
             - 正则语法与PERL正则语法兼容。Java、c
             - 效率高。相对安全。

             POSIX 
             -  存在安全问题，不建议使用。

二、正则表达式的语法
        1、正则表达式的最大组成部分
              - 定界符
              - 原子
              - 元字符
              - 模式修正符
        
              preg_match_all(string $pattern,string $subject[,array $match])
              功能：正则匹配
              参数：
              pattern 正则表单式
              subject  要进行正则匹配的字符串
              match    正则匹配后的结果
              返回：正则匹配到的次数。

         2、定界符
               正则表达式的定界符可以是除了数字，字母，反斜线，空格以外的任何字符。一个正则表达式必须有定界符。定界符是成对出现的。
              {}、||，行业中常用的定界符是一对正斜线//
       
         3、原子
               原子是正则表达式的最小组成单位。一个正则表达式要想有意义，则必须至少有一个原子。
               - 所有的打印字符
               - 特殊字符需要进行转义的原子。转义应用：\
                  例如：*、？、+  
               - 特殊的原子
                  \d  表示所有的数字
                  \D  表示所有的非数字

                  \w  匹配所有的数字、字母、下划线
                 \W  匹配所有的非数字、字母、下划线

                  \s   匹配所有的空白
                  \S   匹配所有的非空白

               - 非打印字符
                  \n
  
              - 自定义原子表
                 []
                 在自定义原子表中指定匹配的范围，例如：
                  [abc]  匹配要匹配的字符串中的a、b和c三个字母
                  [a-z]   匹配要匹配的字符串中的26个小写的英文字母
                  [a-zA-Z] 匹配要匹配的字符串中的26个小写的英文字母和26个大写英文字母。
                ^ 在自定义原子表中代表：非

             4、元字符
                   用来修饰原子的。
                  
                  * 用*修饰的原子可以出现0次或者多次。
                 + 用+修饰的原子可以出现1次或者多选 
                 ？用？修饰的原子可以出现0次或者1次  

                 {n} 用{n}修饰的原子可以出现n次
                 {n,m} 用{n，m}修饰的原子可以出现最少n次，至多m次，其中包含n次和m次。
                 {n,}    用{n，}修饰的原子可以出现最少n次，至多不限制。
出现次数含n次。

                 /b 和 /B 匹配字符串的边界和非边界 /b 用来匹配字符串的边界。/B用来匹配字符串的非边界。

                 |  或
 
                ^和\A 代表以 ^和\A 来修饰的原子作为字符串的起始。
                $和\Z  代表以$和\Z 来修饰的原子作为字符串的结尾。

                ()
                - 子模式
                - 改变匹配的范围 
                - 反向引用
 
             5、模式修正符
                   i :模式修正符i，是用来修正正则表达式的。模式修正符写在定界符的外面。作用是让正则表达式忽略大小写。
                
三、正则表达式的应用
       匹配、查找、分隔、替换
      
       普通的字符串处理函数
       -  简单 效率高
       -  功能有限

       正则表达式字符串处理函数  
       -  复杂 效率低
       -  功能强大

      普通的字符串处理函数和 正则表达式字符串处理函数应用的规则：
   能用普通字符串处理函数完成的功能，就不要用正则表达式处理函数来完成。

1、匹配、查找
      substr(string $haystack,int $start[,int $length])
      功能：字符串的截取
      参数：
      haystack 要截取的字符串
      start        截取的起始位置
      length     截取的长度，length没有给出，截取到字符串的末尾
      返回：被截取后的字符串。


      strpos(string $haystack,string $needle)
      功能：查找needle在haystack中首次出现的位置
      参数：
      haystack 要进行查找的字符串
      needle 子字符串
      返回：位置

      preg_match_all(string $pattern,string $subject[,$match])
      功能：正则匹配
      参数：
      pattern 正则表达式
      subject  要进行正则匹配的字符串
      match    正则匹配的结果
      返回：正则匹配到的次数。

      preg_match(string $pattern,string $subject[,array $match])
      功能：正则匹配
      参数：
       pattern 正则表达式
       subject 要进行正则匹配的字符串
       match  正则匹配到的结果
      返回： 正则匹配到的次数。0或者1.

      preg_grep(string $pattern,array $subject)
      功能：正则匹配
      参数：
      pattern 正则表达式
      subject 要进行正则匹配的数组，数组的元素都是字符串。
      返回：匹配到的结果
  
  2、分隔
       explode(string $delimiter,string $subject[,int $limit])       
       功能：字符串的分隔
       参数：
       delimiter 进行分隔标识字符串 
       subject    要进行分隔的字符串
       limit         限制最大分隔次数
       返回：被分隔好的字符串。格式数组。
      注意：delimiter不能为空字符串。

       implode(string $glub,array $subject)  别名：join
       功能：将数组转化为字符串
       参数：
       glub   联合数组中元素的字符串
       subject 要联合数组
       返回：字符串

       preg_split(string $pattern,string $subject)        
       功能：正则匹配拆分
       参数：
       pattern  正则表达式
       subject  要进行拆分的字符串
       返回：正则拆分的结果












习题：
1、应用普通字符串处理函数，找到下面字符串中的文件名称
     $url = "http://www.baidu.com/index.php"
     $url = "../image/dog.jpg"
     将找到文件名称的功能封装为一个自定义函数。要求参数为给定的地址。

2、应用正则匹配，找到下面字符串中的所有数字
     $subject = "th3i4s i6s 8a te7st";

3、写一个正则表达式，匹配邮箱地址
      $email = "123456@qq.com"
      $email = "tom@163.com"
      $email = "tom.tailor@163.com"
      $email = "tom-tailor@163.com"

4、应用函数explode对字符串subject按照字母t进行拆分。打印出拆分的结果
     $subject = "this is a test"

5、将如下字符串按照标点符号进行拆分：
       $subject = "t,h.i;s i:s a t!es?t"
      输出拆分的结果

6、正则匹配的表单验证
      






             


      







                

         
  













   
            